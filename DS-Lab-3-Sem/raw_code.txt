EXPERIMENT – 01
Design, Develop and Implement a menu driven program in C for the following Array 
operations
a. Creating Array of N Integer elements.
b. Display of Array elements with suitable headings.
c. Inserting an element (ELEM) at a given valid position (POS).
d. Deleting an element at a given valid position (POS).
e. Exit.
Support the program with functions for each of the above operations.
PROGRAM CODE:
#include<stdio.h> 
#include<stdlib.h>
int a[10], n, elem, i, pos;
void create()
{
printf("\nEnter the size of the array elements: "); 
scanf("%d", &n);
printf("\nEnter the elements for the array:\n"); 
for(i=0; i<n; i++)
scanf("%d", &a[i]);
}
void display()
{
int i;
printf("\nThe array elements are:\n"); 
for(i=0; i<n; i++)
{
printf("%d\t", a[i]);
}
}
void insert()
{
printf("\nEnter the position for the new element: "); 
scanf("%d", &pos);
printf("\nEnter the element to be inserted: "); 
scanf("%d", &elem);
for(i=n-1; i>=pos; i--)
{
a[i+1] = a[i];
}
a[pos] = elem; 
n = n+1;
}
void del()
{
printf("\nEnter the position of the element to be deleted: "); 
scanf("%d", &pos);
elem = a[pos]; 
for(i=pos; i<n-1; i++)
{
a[i] = a[i+1];
}
n = n-1;
printf("\nThe deleted element is = %d", elem);
}
void main()
{
int ch; 
do{
printf("\n\n--------Menu ----------\n");
printf("1.Create\n 2.Display\n 3.Insert\n 4.Delete\n 5.Exit\n"); 
printf(" ------------------------------ ");
printf("\nEnter your choice: "); 
scanf("%d", &ch);
switch(ch)
{
case 1: create();
break; 
case 2: display();
break; 
case 3: insert();
break; 
case 4: del();
break; 
case 5: exit(0);
break;
default: printf("\nInvalid choice:\n"); 
break;
}
}while(ch!=5);
}








EXPERIMENT – 02
Design, Develop and Implement a program in C for the following operations on Strings
a. Read a Main String (STR), a Pattern String (PAT) and a Replace String (REP).
b. Perform Pattern Matching Operation: Find and Replace all occurrences of PATin 
STR with
REP if PAT exists in STR. Repost suitable messages in case PAT does not exist in STR.
Support the program with functions for each of the above operations. Don’t use built-
in functions.
PROGRAM CODE:
#include<stdio.h> 
#include<stdlib.h>
char str[100], pat[50], rep[50], ans[100]; 
int i, j, c, m, k, flag=0;
void stringmatch()
{
i = m = c = j = 0; 
while(str[c] != '\0')
{
if(str[m] == pat[i])
{
i++; 
m++;
if(pat[i] == '\0')
{
flag = 1;
flag = 1;
for(k = 0; rep[k] != '\0'; k++, j++) 
ans[j] = rep[k];
i = 0;
c = m;
}
else
{
ans[j] = str[c]; 
j++;
c++;
m = c; 
i = 0;
}
}
ans[j] = '\0';
}
void main()
{
printf("\nEnter a main string \n"); 
gets(str);
printf("\nEnter a pattern string \n"); 
gets(pat);
printf("\nEnter a replace string \n"); 
gets(rep);
stringmatch(); if(flag 
== 1)
printf("\nThe resultant string is\n %s" , ans); 
else
printf("\nPattern string NOT found\n");
}







EXPERIMENT - 03
Design, Develop and Implement a menu driven program in C for the following 
operations on
STACK of integers (Array implementation of stack with maximum size MAX)
a. Push an element on to stack
b. Pop an element from stack.
c. Display the status of stack.
d. Demonstrate Overflow and Underflow situations on stack.
e. Exit.
Support the program with appropriate functions for each of the above operations.
PROGRAM CODE:
#include<stdio.h> 
#include<stdlib.h> int 
i,top,ch,s[3],item;
void push(),pop(),dis();
void main()
{
top=-1; 
ch=0; 
while(ch!=4)
{
printf("\nEnter the menu for stack operation\n"); 
printf("\n1:insert\n2:delete\n3:display\n4:exit\n"); 
printf("Input ur choice\n");
scanf("%d",&ch); 
switch(ch)
{
case 1: push();
break; 
case 2: pop();
break; 
case 3: dis();
break; 
case 4: exit(0);
break;
default: printf("Invalid choice\n");
}
}
return 0;
}
void push()
{
int item; 
if(top==3-1)
{
printf("Stack Overflow\n"); 
return;
}
printf("Enter an item to be pushed:"); 
scanf("%d",&item);
top+=1; 
s[top]=item;
}
void pop()
{
if(top==-1)
{
printf("Stack Undeflow\n"); 
return;
}
printf("Item poped is %d\n",s[top--]);
}
void dis()
{
if(top==-1)
{
printf("Stack is empty\n"); 
return;
}
printf("\nStack contains .....\n");
for(i=0; i<=top; i++) 
printf("%d\t",s[i]);
}







EXPERIMENT – 04
Design, Develop and Implement a Program in C for converting an Postfix Expression to 
Infix Expression. Program should support for both parenthesized and free parenthesized 
expressions with the operators: +, -, *, /, %(Remainder), ^ (Power) and alphanumeric 
operands.
#include<stdio.h>
#include<ctype.h>

char stack[100];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
    return 0;
}

int main()
{
    char exp[100];
    char *e, x;
    printf("Enter the expression : ");
    scanf("%s",exp);
    printf("\n");
    e = exp;
    
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c ",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c ", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c ",pop());
            push(*e);
        }
        e++;
    }
    
    while(top != -1)
    {
        printf("%c ",pop());
    }return 0;
}







EXPERIMENT – 05
Design, Develop and Implement a Program in C for the following Stack Applications
a. Evaluation of Postfix expression 
b. Solving Tower of Hanoi problem with n disks.
PROGRAM CODE:
PROGRAM 5A:
#include<stdio.h>
#include<ctype.h>
int stack[25],top=-1;
main()
{
char postfix[25];
int i=0,value[20],result;
printf("Enter a valid postfix expr\n");
scanf("%s",postfix);
while(postfix[i]!='\0')
{
 if(isalpha(postfix[i]))
 {
 printf("enter the value %c\n",postfix[i]);
 scanf("%d",&value[i]);
 }
 i++;
}
result=eval_postfix(postfix,value);
printf("The result of %s=%d\n",postfix,result);
}
int eval_postfix(char postfix[],int data[])
{
 int i=0,op1,op2,res;
 char ch;
 while(postfix[i]!='\0')
 {
 ch=postfix[i];
 if(isalpha(ch))
 push(data[i]);
 else
 {
op2=pop();
op1=pop();
switch(ch)
{
case '+': push(op1+op2); break;
 case '-': push(op1-op2); break;
 case '/': push(op1/op2); break;
 case '*': push(op1*op2); break;
 case '$': push(op1^op2); break;
}
 }
 i++;
}
res=pop();
return res;
}
 int push(int num)
 {
 top+=1;
 stack[top]=num;
 return;
 }
 int pop()
 {
 int num;
 num=stack[top--];
 return num;
 }



PROGRAM 5B:
#include<stdio.h> 
#include<stdlib.h>
#include<math.h>
void tower(int n, int source, int temp,int destination)
{
if(n == 0) 
return;
tower(n-1, source, destination, temp);
printf("\nMove disc %d from %c to %c", n, source, destination); 
tower(n-1, temp, source, destination);
}
void main()
{
int n;
printf("\nEnter the number of discs: \n"); 
scanf("%d", &n);
tower(n, 'A', 'B', 'C');
printf("\n\nTotal Number of moves are: %d", (int)pow(2,n)-1);
}










EXPERIMENT – 06
Design, Develop and Implement a menu driven Program in C 
for the following operations on QUEUE of Characters (Array 
Implementation of Queue with maximum size MAX)
a. Insert an Element on to QUEUE
b. Delete an Element from QUEUE
c. Demonstrate Overflow and Underflow
situations on QUEUE 
d. Display the status of QUEUE
e. Exit
Support the program with appropriate functions for each of the above
operations.
PROGRAM CODE:
#include<stdio.h>
#include<conio.h>
int i,front,rear,ch,s[3],item;
void insert(),delet(),dis();
main()
{
front=0;
rear=-1;
ch=0;
while(ch!=4)
{
 printf("\nEnter the menu for queue operation\n");
 printf("\n1:insert\n2:delete\n3:display\n4:exit\n");
 printf("Input ur choice\n");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1:
insert(); break;
 case 2:
delet(); break;
 case 3:
dis(); break;
 case 4:
exit(0); break;
default:
printf("Invalid choice\n");
 }
}
return 0;
}
void insert()
{
 int item;
 if(rear==3-1)
 {
 printf("Queue is overflow\n");
 return;
 }
 printf("Enter an item to be inserted:");
 scanf("%d",&item);
 rear+=1;
 s[rear]=item;
}
void delet()
{
if(front>rear)
{
 printf("Queue is empty\n");
 return;
}
printf("Item to be deleted is %d\n",s[front++]);
}
void dis()
{
if(front>rear)
{
 printf("Queue is empty\n");
 return;
}
printf("\nQueue contains......\n");
for(i=front; i<=rear; i++)
printf("%d\t",s[i]);
}









7.Singly Linked List using Front insertion/deletion and End 
insertion/deletion
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
void create(),display(),insert_front(),insert_end(),delete_front(),delete_end();
struct node{
int data;
struct node *link;
};
struct node *first=NULL, *last=NULL, *cur, *next,*prev;
void create(){
int i=0,n;
printf("Enter the no.of nodes you want in linked list:\n");
scanf("%d",&n);
while(i<n){
cur=(struct node*)malloc(sizeof(struct node));
printf("Enter the data:\n");
scanf("%d",&cur->data);
if(i==0){
cur->link=NULL;
first=cur;
}
else{
cur->link=first;
first=cur;
}
i++;
}
}
void insert_front(){
cur=(struct node*)malloc(sizeof(struct node));
printf("Enter the data:\n");
scanf("%d",&cur->data);
if(first==NULL){
cur->link=NULL;
first=cur;
}
else{
cur->link=first;
first=cur;
}
}
void insert_end(){
cur=(struct node*)malloc(sizeof(struct node));
printf("Enter the data:\n");
scanf("%d",&cur->data);
if(first==NULL){
cur->link=NULL;
first=cur;
}
else{
cur->link=NULL;
next=first;
while(next->link!=NULL)
next=next->link;
next->link=cur;
}
}
void delete_front(){
if(first!=NULL){
cur=first;
first=first->link;
printf("Node deleted contains: %d\n",cur->data);
free(cur);
}
else{
printf("Void Deletion\n");
}
}
void delete_end(){
if(first!=NULL){
next=first;
prev=first;
while(next->link!=NULL){
prev=next;
next=next->link;
}
prev->link=NULL;
printf("Node deleted contains: %d\n",next->data);
free(next);
}
}
void display(){
cur=first;
printf("\n");
while(cur!=NULL){
printf("%d\n",cur->data);
cur=cur->link;
}
}
void main(){
int ch;
printf("\t\tSINGLY LINKED LIST\t\t");
do{
printf("\n1.Create\n2.Display\n3.Insert front\n4.Insert 
end\n5.Delete front\n6.Delete end\n7.Exit\n");
printf("\n\nEnter your choice:\n");
scanf("%d",&ch);
switch(ch){
case 1: create(); break;
case 2: display(); break;
case 3: insert_front(); break;
case 4: insert_end(); break;
case 5: delete_front(); break;
case 6: delete_end(); break;
case 7: exit(0);
default: printf("\nInvalid Choice\n");
}
}while(1);
}

